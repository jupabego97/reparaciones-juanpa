import { GoogleGenerativeAI } from '@google/generative-ai'

// Configuraci√≥n de Gemini
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY'
const genAI = new GoogleGenerativeAI(API_KEY)

class GeminiService {
  constructor() {
    this.model = genAI.getGenerativeModel({ 
      model: "gemini-2.5-flash",
      generationConfig: {
        temperature: 0.1,
        topK: 32,
        topP: 1,
        maxOutputTokens: 1024,
      }
    })
    
    // Control de rate limiting
    this.lastRequestTime = 0
    this.minInterval = 4000 // 4 segundos entre requests (15 RPM = 4s interval)
  }

  // Convertir archivo a base64
  async fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = () => {
        const base64 = reader.result.split(',')[1]
        resolve(base64)
      }
      reader.onerror = reject
      reader.readAsDataURL(file)
    })
  }

  // Control de rate limiting
  async waitForRateLimit() {
    const now = Date.now()
    const timeSinceLastRequest = now - this.lastRequestTime
    
    if (timeSinceLastRequest < this.minInterval) {
      const waitTime = this.minInterval - timeSinceLastRequest
      console.log(`‚è≥ Esperando ${waitTime}ms para respetar l√≠mites de API...`)
      await new Promise(resolve => setTimeout(resolve, waitTime))
    }
    
    this.lastRequestTime = Date.now()
  }

  // Extraer informaci√≥n del equipo desde la imagen
  async extractEquipmentInfo(imageFile, retryCount = 0) {
    try {
      console.log('ü§ñ Analizando imagen con Gemini Flash 2.5...')
      
      // Respetar l√≠mites de rate
      await this.waitForRateLimit()
      
      const base64Image = await this.fileToBase64(imageFile)
      
      const prompt = `
Analiza esta imagen de un equipo electr√≥nico (laptop, computadora, tablet, etc.) y extrae la siguiente informaci√≥n si est√° visible:

1. NOMBRE DEL CLIENTE: Busca cualquier etiqueta, sticker, papel o texto que indique el nombre del propietario
2. N√öMERO DE WHATSAPP: Busca n√∫meros de tel√©fono con formato +57, +1, etc. o n√∫meros de 10 d√≠gitos
3. CARGADOR: Determina si hay un cargador visible en la imagen (cable de alimentaci√≥n, adaptador de corriente)
4. TIPO DE EQUIPO: Identifica qu√© tipo de dispositivo es (laptop, PC, tablet, etc.)
5. MARCA Y MODELO: Si es posible identificar la marca y modelo del equipo

IMPORTANTE: 
- Si no puedes encontrar informaci√≥n espec√≠fica, responde "NO_ENCONTRADO"
- Para el cargador, responde solo "S√ç" o "NO"
- Para n√∫meros de WhatsApp, incluye el c√≥digo de pa√≠s si est√° visible

Responde √öNICAMENTE en el siguiente formato JSON:
{
  "nombreCliente": "nombre encontrado o NO_ENCONTRADO",
  "whatsappNumber": "n√∫mero con c√≥digo de pa√≠s o NO_ENCONTRADO",
  "tieneCargador": "S√ç o NO",
  "tipoEquipo": "tipo de dispositivo identificado",
  "marcaModelo": "marca y modelo si es identificable o NO_ENCONTRADO"
}
`

      const imagePart = {
        inlineData: {
          data: base64Image,
          mimeType: imageFile.type
        }
      }

      const result = await this.model.generateContent([prompt, imagePart])
      const response = await result.response
      const text = response.text()
      
      console.log('ü§ñ Respuesta de Gemini:', text)

      // Intentar parsear la respuesta JSON
      try {
        // Limpiar la respuesta para extraer solo el JSON
        const jsonMatch = text.match(/\{[\s\S]*\}/)
        if (!jsonMatch) {
          throw new Error('No se encontr√≥ JSON v√°lido en la respuesta')
        }
        
        const jsonResponse = JSON.parse(jsonMatch[0])
        
        // Validar y limpiar la respuesta
        const cleanedResponse = {
          nombreCliente: this.cleanText(jsonResponse.nombreCliente),
          whatsappNumber: this.cleanPhoneNumber(jsonResponse.whatsappNumber),
          tieneCargador: this.cleanBooleanResponse(jsonResponse.tieneCargador),
          tipoEquipo: this.cleanText(jsonResponse.tipoEquipo),
          marcaModelo: this.cleanText(jsonResponse.marcaModelo)
        }

        console.log('‚úÖ Informaci√≥n extra√≠da:', cleanedResponse)
        return cleanedResponse

      } catch (parseError) {
        console.error('‚ùå Error parseando respuesta JSON:', parseError)
        console.log('Respuesta original:', text)
        
        // Fallback: intentar extraer informaci√≥n manualmente
        return this.extractInfoManually(text)
      }

    } catch (error) {
      console.error('‚ùå Error en Gemini Service:', error)
      
      // Manejo espec√≠fico de errores de rate limiting
      if (error.message.includes('Quota exceeded') || error.message.includes('RATE_LIMIT_EXCEEDED')) {
        if (retryCount < 3) {
          console.log(`üîÑ Reintentando en ${(retryCount + 1) * 5} segundos... (intento ${retryCount + 1}/3)`)
          await new Promise(resolve => setTimeout(resolve, (retryCount + 1) * 5000))
          return this.extractEquipmentInfo(imageFile, retryCount + 1)
        } else {
          throw new Error('L√≠mite de cuota excedido. Intenta nuevamente en unos minutos.')
        }
      }
      
      // Otros errores
      if (error.message.includes('API key')) {
        throw new Error('API key de Gemini inv√°lida. Verifica tu configuraci√≥n.')
      }
      
      throw new Error(`Error analizando imagen: ${error.message}`)
    }
  }

  // Limpiar texto extra√≠do
  cleanText(text) {
    if (!text || text.toUpperCase().includes('NO_ENCONTRADO') || text.toUpperCase().includes('NO ENCONTRADO')) {
      return ''
    }
    return text.trim().replace(/['"]/g, '')
  }

  // Limpiar n√∫mero de tel√©fono
  cleanPhoneNumber(phone) {
    if (!phone || phone.toUpperCase().includes('NO_ENCONTRADO')) {
      return ''
    }
    
    // Limpiar y formatear n√∫mero
    let cleaned = phone.replace(/[^\d+]/g, '')
    
    // Si no tiene c√≥digo de pa√≠s, asumir Colombia (+57)
    if (!cleaned.startsWith('+')) {
      if (cleaned.length === 10) {
        cleaned = '+57' + cleaned
      } else if (cleaned.length > 10) {
        cleaned = '+' + cleaned
      }
    }
    
    return cleaned
  }

  // Limpiar respuesta booleana
  cleanBooleanResponse(response) {
    if (!response) return false
    
    const responseUpper = response.toString().toUpperCase()
    return responseUpper.includes('S√ç') || responseUpper.includes('SI') || responseUpper.includes('YES') || responseUpper.includes('TRUE')
  }

  // Extracci√≥n manual como fallback
  extractInfoManually(text) {
    console.log('üîÑ Intentando extracci√≥n manual...')
    
    const result = {
      nombreCliente: '',
      whatsappNumber: '',
      tieneCargador: false,
      tipoEquipo: '',
      marcaModelo: ''
    }

    // Buscar n√∫meros de tel√©fono
    const phoneRegex = /(\+?\d{1,3}[-.\s]?)?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}/g
    const phoneMatch = text.match(phoneRegex)
    if (phoneMatch) {
      result.whatsappNumber = this.cleanPhoneNumber(phoneMatch[0])
    }

    // Buscar indicios de cargador
    if (text.toLowerCase().includes('cargador') || text.toLowerCase().includes('cable') || text.toLowerCase().includes('adaptador')) {
      result.tieneCargador = true
    }

    // Buscar tipo de equipo
    const deviceTypes = ['laptop', 'computadora', 'pc', 'tablet', 'macbook', 'notebook']
    for (const type of deviceTypes) {
      if (text.toLowerCase().includes(type)) {
        result.tipoEquipo = type.charAt(0).toUpperCase() + type.slice(1)
        break
      }
    }

    return result
  }

  // Verificar si la API key est√° configurada
  isConfigured() {
    return API_KEY && API_KEY !== 'YOUR_GEMINI_API_KEY'
  }

  // Transcribir audio a texto
  async transcribeAudio(base64Audio, retryCount = 0) {
    try {
      console.log('üé§ Transcribiendo audio con Gemini 2.5 Flash...')
      
      // Respetar l√≠mites de rate
      await this.waitForRateLimit()
      
      const prompt = `
Transcribe el siguiente audio en espa√±ol y extrae informaci√≥n relevante sobre problemas t√©cnicos de equipos electr√≥nicos.

INSTRUCCIONES:
1. Transcribe exactamente lo que se dice en el audio
2. Si se mencionan problemas t√©cnicos, organiza la informaci√≥n de manera clara
3. Corrige errores gramaticales menores pero mant√©n el contenido original
4. Si el audio no es claro, indica qu√© partes no se pudieron transcribir

FORMATO DE RESPUESTA:
Devuelve solo el texto transcrito sin formato adicional.

Ejemplo de buena transcripci√≥n:
"La laptop no enciende cuando presiono el bot√≥n de poder. La pantalla permanece negra y no hace ning√∫n sonido. El cargador est√° conectado pero no parece cargar la bater√≠a."
`

      const result = await this.model.generateContent([
        {
          inlineData: {
            mimeType: "audio/webm",
            data: base64Audio
          }
        },
        { text: prompt }
      ])

      const response = await result.response
      const transcription = response.text()
      
      console.log('üé§ Transcripci√≥n de Gemini:', transcription)
      
      if (transcription && transcription.trim()) {
        return transcription.trim()
      } else {
        throw new Error('No se pudo transcribir el audio')
      }

    } catch (error) {
      console.error('‚ùå Error en Gemini transcription:', error)
      
      // Manejo espec√≠fico de errores de rate limiting
      if (error.message.includes('Quota exceeded') || error.message.includes('429')) {
        if (retryCount < 3) {
          console.log(`üîÑ Reintentando transcripci√≥n en ${(retryCount + 1) * 3} segundos... (intento ${retryCount + 1}/3)`)
          await new Promise(resolve => setTimeout(resolve, (retryCount + 1) * 3000))
          return this.transcribeAudio(base64Audio, retryCount + 1)
        } else {
          throw new Error('L√≠mite de cuota excedido. Intenta nuevamente en unos minutos.')
        }
      }
      
      // Error de API key
      if (error.message.includes('API key') || error.message.includes('API_KEY')) {
        throw new Error('API key de Gemini inv√°lida. Verifica tu configuraci√≥n.')
      }
      
      throw new Error(`Error transcribiendo audio: ${error.message}`)
    }
  }

  // Obtener informaci√≥n de configuraci√≥n
  getConfigInfo() {
    return {
      isConfigured: this.isConfigured(),
      model: "gemini-1.5-flash",
      apiKeyStatus: API_KEY ? `${API_KEY.substring(0, 8)}...` : 'No configurada'
    }
  }

  // M√©todo de prueba simple
  async testConnection() {
    try {
      if (!this.isConfigured()) {
        throw new Error('Servicio no configurado')
      }

      console.log('üß™ Probando conexi√≥n con Gemini...')
      await this.waitForRateLimit()

      const result = await this.model.generateContent('Responde solo "OK" si puedes procesar este mensaje.')
      const response = await result.response
      const text = response.text()

      console.log('‚úÖ Respuesta de Gemini:', text)
      return { success: true, response: text }
    } catch (error) {
      console.error('‚ùå Error probando Gemini:', error)
      return { success: false, error: error.message }
    }
  }

  // M√©todo para analizar texto simple
  async analyzeText(text, retryCount = 0) {
    try {
      if (!this.isConfigured()) {
        throw new Error('Gemini no est√° configurado. Agrega tu VITE_GEMINI_API_KEY.')
      }

      console.log('ü§ñ Analizando texto con Gemini...')
      await this.waitForRateLimit()

      const prompt = `Analiza el siguiente texto y proporciona un resumen √∫til: "${text}"`
      
      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const analysisText = response.text()

      console.log('üìù An√°lisis completado:', analysisText)
      return analysisText

    } catch (error) {
      console.error('‚ùå Error analizando texto:', error)
      
      if (retryCount < 2 && (error.message.includes('quota') || error.message.includes('rate'))) {
        console.log(`üîÑ Reintentando an√°lisis de texto (${retryCount + 1}/3)...`)
        await new Promise(resolve => setTimeout(resolve, 5000))
        return this.analyzeText(text, retryCount + 1)
      }
      
      throw error
    }
  }
}

// Crear instancia √∫nica
const geminiService = new GeminiService()

export default geminiService
export { GeminiService }
